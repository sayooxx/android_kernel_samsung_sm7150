name: m51

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * 6'
  push:
    branches:
      - HEAD
  pull_request:
    branches:
      - HEAD

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_MAXSIZE: "2G"
      CCACHE_HARDLINK: "true"
      KERNEL_DEFCONFIG: "m51_defconfig"
      KERNEL_CMDLINE: "ARCH=arm64 CC=clang CLANG_TRIPLE=aarch64-linux-gnu- CROSS_COMPILE=aarch64-linux-gnu- CROSS_COMPILE_ARM32=arm-linux-gnueabi- O=out"
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.1
        with:
          submodules: 'true'
          fetch-depth: 100

      - name: Set up ccache
        uses: hendrikmuhs/ccache-action@v1.2.10

      - name: Install dependencies
        run: |
          sudo apt-get update -y
          sudo apt install gcc-aarch64-linux-gnu -y
          sudo apt install gcc-arm-linux-gnueabi -y
          sudo apt install binutils make python3 ccache libssl-dev build-essential bc bison flex unzip libssl-dev ca-certificates xz-utils mkbootimg cpio device-tree-compiler git git-lfs jq -y
          git clone https://gitlab.com/FPSensor/clang_r487747x prebuilts/clang/host/linux-x86/clang-r487747c --depth=1
          make clean
          make mrproper

      - name: Get Time
        id: get_time
        run: echo "TIME=$(TZ=UTC-8 date +%m%d%H%M )" >> $GITHUB_ENV

      - name: Remove Old KernelSU and Add New version of KernelSU
        run: |
          set -x
          rm -rf KernelSU
          rm -rf drivers/kernelsu
          curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash - 

      - name: Setup Environment For Kernel
        run: |
          export PATH=$PATH:$(pwd)/clang-r487747c/bin/
          export CC=clang
          export CLANG_TRIPLE=aarch64-linux-gnu-
          export CROSS_COMPILE=aarch64-linux-gnu-
          export CROSS_COMPILE_ARM32=arm-linux-gnueabi-
          export ARCH=arm64
          export SUBARCH=arm64
          export ANDROID_MAJOR_VERSION=r
          export KCFLAGS=-w

      - name: Create Kernel Name
        run : |
          latest_version_of_kernel_su=$(curl -s https://api.github.com/repos/tiann/KernelSU/releases/latest | jq -r '.tag_name')
          final_tag="${latest_version_of_kernel_su}"
          echo "FINAL_TAG=$final_tag" >> $GITHUB_ENV  # Set only the necessary variable

      - name: Start Build Kernel
        run: |
          make $KERNEL_CMDLINE $KERNEL_DEFCONFIG CC="ccache clang"
          make $KERNEL_CMDLINE CC="ccache clang" -j$(nproc --all)
          tools/mkdtimg create out/arch/arm64/boot/dtbo.img --page_size=4096 $(find out/arch -name "*.dtbo")
          tools/mkdtimg create out/arch/arm64/boot/recovery_dtbo --page_size=4096 $(find out -name "*.dtbo")

      - name: Pack Kernel Image In AnyKernel3
        run: |
          git clone --depth=1 https://github.com/iambinaytiwari/AnyKernel3 -b master AnyKernel3 && rm -rf AnyKernel3/.git AnyKernel3/.github AnyKernel3/LICENSE AnyKernel3/README.md

          rm -rf out/AnyKernel3

          # -- Make Copy of AK3 in out
          cp -r AnyKernel3 out/

          # -- Copy Kernel Image into AK3
          cp out/arch/arm64/boot/Image.gz-dtb out/AnyKernel3/Image.gz-dtb
          cp out/arch/arm64/boot/dtbo.img out/AnyKernel3/dtbo.img

          # -- Copy DTB file from " ut/arch/arm64/boot/dts/qcom/ " to " out/AK3 "
          if [ -f out/arch/arm64/boot/dts/qcom/sdmmagpie.dtb ]; then
                 cp out/arch/arm64/boot/dts/qcom/sdmmagpie.dtb out/AnyKernel3/dtb
          fi

          cd out/AnyKernel3

          # -- Create zip file of AnyKernel3
          zip -r9 NoNameKernel-m51-KSU-${{ env.FINAL_TAG }}-4.14.190-"$(/bin/date -u '+%Y%m%d-%H%M')".zip .

      - name: Releases Kernel TO Github
        uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          title: ${{ env.FINAL_TAG }}
          automatic_release_tag: ${{ env.FINAL_TAG }}
          prerelease: false
          files: |
            out/AnyKernel3/*.zip
            out/arch/arm64/boot/Image.gz
            out/arch/arm64/boot/dtbo.img
            out/arch/arm64/boot/recovery_dtbo
